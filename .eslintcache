[{"C:\\Users\\w72sp\\Desktop\\GetCoding\\sticky-notes\\src\\index.js":"1","C:\\Users\\w72sp\\Desktop\\GetCoding\\sticky-notes\\src\\App.js":"2","C:\\Users\\w72sp\\Desktop\\GetCoding\\sticky-notes\\src\\reportWebVitals.js":"3","C:\\Users\\w72sp\\Desktop\\GetCoding\\sticky-notes\\src\\Board.jsx":"4","C:\\Users\\w72sp\\Desktop\\GetCoding\\sticky-notes\\src\\StickyNote.jsx":"5","C:\\Users\\w72sp\\Desktop\\GetCoding\\sticky-notes\\src\\EditText.jsx":"6"},{"size":500,"mtime":499162500000,"results":"7","hashOfConfig":"8"},{"size":143,"mtime":1612357922108,"results":"9","hashOfConfig":"8"},{"size":362,"mtime":499162500000,"results":"10","hashOfConfig":"8"},{"size":4607,"mtime":1612626569701,"results":"11","hashOfConfig":"8"},{"size":1236,"mtime":1612673051520,"results":"12","hashOfConfig":"8"},{"size":1881,"mtime":1612735408041,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"1n33fj0",{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"16"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\w72sp\\Desktop\\GetCoding\\sticky-notes\\src\\index.js",[],["28","29"],"C:\\Users\\w72sp\\Desktop\\GetCoding\\sticky-notes\\src\\App.js",[],"C:\\Users\\w72sp\\Desktop\\GetCoding\\sticky-notes\\src\\reportWebVitals.js",[],"C:\\Users\\w72sp\\Desktop\\GetCoding\\sticky-notes\\src\\Board.jsx",["30","31"],"import React from \"react\" ;\r\nimport postit from './postit.png';\r\nimport StickyNote from \"./StickyNote.jsx\";\r\n\r\n//****--------------------------Board  Class Component ------------------------****//\r\nclass Board extends React.Component{\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            currentStickyNotes: [],\r\n            height: 0,\r\n            width:0,\r\n        };\r\n        this.resizeHandler = this.resizeHandler.bind(this); \r\n        \r\n      } \r\n      \r\n    //Get the Height, Width of the element after React renders that element/window resize event\r\n    resizeHandler() {\r\n        const width = this.divElement.clientWidth;\r\n        const height = this.divElement.clientHeight;\r\n        this.setState({ width, height });\r\n    }\r\n    componentDidMount() {\r\n        this.resizeHandler();\r\n        window.addEventListener('resize', this.resizeHandler);\r\n      }\r\n    \r\n      componentWillUnmount(){\r\n        window.removeEventListener('resize', this.resizeHandler);\r\n      }\r\n\r\n    /*--------------------------Add a StickyNote --------------------------*/\r\n    addStickyNotes(e){\r\n        const currentStickyNotes = this.state.currentStickyNotes;\r\n        const Xmax = this.state.width-200;\r\n        const Ymax = this.state.height-200;\r\n        const Xmin = 0;\r\n        const Ymin = 0;\r\n        \r\n        //let posX = getRandomXInt(Xmin, Xmax);  //Random positions \r\n        //let posY = getRandomYInt(Ymin, Ymax);\r\n        //console.log (posX);\r\n        //console.log (posY);\r\n        console.log(e);\r\n        let posX = e.nativeEvent.offsetX;  // X and Y coordinates of the mouse click position\r\n        let posY = e.nativeEvent.offsetY;\r\n        console.log (posX);\r\n        console.log (posY);\r\n        if (posX > Xmax) {                 // positioning w.r.t the size of the Board\r\n            posX = e.nativeEvent.offsetX-200;\r\n        }\r\n        if (posY > Ymax) {\r\n            posY = e.nativeEvent.offsetY-200;\r\n        }\r\n        \r\n        let bcolor = generateColor (); //Random color generation\r\n        \r\n        // New state - Adding new stickyNote to the currentStickyNotes array \r\n        this.setState({\r\n            currentStickyNotes: currentStickyNotes.concat(\r\n                [\r\n                    <StickyNote                //calling the StickyNote component passing the properties\r\n                        text = \"Work\" \r\n                        positionX= {posX} \r\n                        positionY = {posY} \r\n                        color = \"black\" \r\n                        bgColor = {bcolor}\r\n                    /> \r\n                ])\r\n        });\r\n    }\r\n    \r\n    /*-----------------Render Sticky Notes --------------------*/\r\n    renderStickyNotes(){\r\n        return(\r\n            this.state.currentStickyNotes   //current stickynote along with the previous ones\r\n        );\r\n    }\r\n    \r\n    /*-----------------Render Board- with StickyNotes along with Headings --------------------*/\r\n    render(){\r\n        \r\n        return(\r\n            <div className=\"App\">\r\n                <header className=\"App-header\" onClick={(e) => this.addStickyNotes(e)} ref={ (divElement) => { this.divElement = divElement } }> \r\n                    {this.renderStickyNotes()}\r\n                    \r\n                    <img src={postit} className=\"App-logo\" alt=\"postit\" />\r\n                    <div className = \"heading\"> <h1>Sticky Notes</h1> </div>\r\n                    <div className = \"ref\"> \r\n                        <h2 className = \"name\"> .. by Swapna \r\n                            <a className = \"link\" href=\"https://github.com/SPchalil/React-StickyNotes\"> github </a>  \r\n                        </h2> \r\n                    </div>\r\n   \r\n                </header>\r\n\r\n                \r\n            </div>\r\n        )\r\n    \r\n    }\r\n    \r\n};\r\n//Size: width: <b>{this.state.width}px</b>, height: <b>{this.state.height}px</b>\r\n\r\n/*-----------------------------\r\n// Functions - Generating random positions \r\nfunction getRandomXInt(Xmin, Xmax) {\r\n    const min = Math.ceil(Xmin);\r\n    const max = Math.floor(Xmax);\r\n    const num =  Math.floor(Math.random() * (max - min + 1) + min);\r\n    return num.toString()+\"px\"; \r\n  }\r\n  \r\nfunction getRandomYInt(Ymin, Ymax) {\r\n    const min = Math.ceil(Ymin);\r\n    const max = Math.floor(Ymax);\r\n    const num =  Math.floor(Math.random() * (max - min + 1) + min);\r\n    return num.toString()+\"px\"; \r\n  }\r\n\r\n----------------------------------*/\r\n// Function - Generating random color Sticky Notes \r\n\r\nfunction generateColor () {\r\n    return '#' +  Math.random().toString(16).substr(-6);\r\n  }\r\n\r\n\r\nexport default Board;","C:\\Users\\w72sp\\Desktop\\GetCoding\\sticky-notes\\src\\StickyNote.jsx",[],"C:\\Users\\w72sp\\Desktop\\GetCoding\\sticky-notes\\src\\EditText.jsx",[],{"ruleId":"32","replacedBy":"33"},{"ruleId":"34","replacedBy":"35"},{"ruleId":"36","severity":1,"message":"37","line":38,"column":15,"nodeType":"38","messageId":"39","endLine":38,"endColumn":19},{"ruleId":"36","severity":1,"message":"40","line":39,"column":15,"nodeType":"38","messageId":"39","endLine":39,"endColumn":19},"no-native-reassign",["41"],"no-negated-in-lhs",["42"],"no-unused-vars","'Xmin' is assigned a value but never used.","Identifier","unusedVar","'Ymin' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]