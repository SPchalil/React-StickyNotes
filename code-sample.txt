/*---
@media (prefers-reduced-motion: no-preference) {
  .App-logo {
    animation: App-logo-spin infinite 20s linear;
  }
}

@keyframes App-logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}
--*/










/*----
    addNewpostit = () => {
        this.setState({positionX:"200px", positionY: "200px"});
    }
                <div >
                    <button className = "Add" type="button" onClick={this.addNewpostit}> + </button>
                </div>
*/


<div > 
                        <div > <StickyNote text = "Work" positionX= "100px" positionY = "150px" color = "black" bgColor = "blue"/> </div> 
                        <div > <StickyNote text = "Work" positionX= "400px" positionY = "600px" color = "black" bgColor = "yellow"/> </div>
                        <div > <StickyNote text = "Work" positionX= "100px" positionY = "1000px" color = "black" bgColor = "pink"/> </div>

</div>


<button className = "board-stickers" onClick={this.handleClick}> stickers </button>

/*
    handleClick() {
        
        
        
        alert("Hello GAYATHRI!!!");
    }

        

        //<StickyNote text = "Work" positionX= "100px" positionY = "150px" color = "black" bgColor = "blue"/> ;
        */


//Getting a random integer value for positions in the Board
let Xmax = 1366;
let Ymax = 768;
let Xmin = 0;
let Ymin = 0;

//Getting a random integer between two values for positionX  


function getRandomIntInclusive(Xmin, Xmax) {
  min = Math.ceil(Xmin);
  max = Math.floor(Xmax);
 num =  Math.floor(Math.random() * (max - min + 1) + min);
return num.toString()+"px"; 
}
positionX = getRandomIntInclusive(min, Xmax)

//Getting a random integer between two values for positionY 
positionY = 

function getRandomIntInclusive(Ymin, Ymax) {
  min = Math.ceil(Ymin);
  max = Math.floor(Ymax);
  num = Math.floor(Math.random() * (max - min + 1) + min);
  return num.toString()+"px"; 
}
---------------------------
positionX = fun() +'px';
positionY = fun() + 'px';

function myFunction() {
  var num = 15;
  var n = num.toString()+"px";
---------------------------------------------

<header className="App-header" onClick={() => this.setState({currentStickyNotes: <StickyNote text = "Work" positionX= "100px" positionY = "150px" color = "black" bgColor = "blue"/>})}> 
                    {this.state.currentStickyNotes}
</header>

render => {this.renderStickyNotes()}

renderStickyNotes(){
return (
      <StickyNote
        value={this.state.squares[i]}
        onClick={() => this.handleClick(i)}
      />
    );
  }


}

----------------------------------------------------------------

class DivSize extends Component {

  constructor(props) {
    super(props)

    this.state = {
      height: 0,
      width : 0
    }
  }

  componentDidMount() {
    const height = this.divElement.clientHeight;
    this.setState({ height });
    const width = this.divElement.clientWidth;
    this.setState({ width });
  }

  render() {
    return (
      <div 
        className="test"
        ref={ (divElement) => { this.divElement = divElement } }
      >
        Size: <b>{this.state.height}px</b> but it should be 18px after the render
	Size: <b>{this.state.width}px</b>
      </div>
    )
  }
}

render(<DivSize />, document.querySelector('#container'))

HSize:
657px
WSize:
1366px

Size: width: <b>{this.state.width}px</b>, height: <b>{this.state.height}px</b>
--------------------------
<StickyNote text = "Work" positionX= {posX} positionY = {posY} color = "black" bgColor = "pink"/>
----------------------------------------------------------



<canvas width="200" height="200"
        style="background-color: green"> 
    </canvas> 
  
    <script type="text/javascript"> 
        function getMousePosition(header, event) { 
            let rect = header.getBoundingClientRect(); 
            let x = event.clientX - rect.left; 
            let y = event.clientY - rect.top; 
            console.log("Coordinate x: " + x,  
                        "Coordinate y: " + y); 
        } 
      
        let boardElem = document.querySelector("App-header"); 
          
        boardElem.addEventListener("mousedown", function(e) 
        { 
            getMousePosition(boardElem, e); 
        }); 

----------------------------------------------------------------

constructor(props) {
        super(props);
        this.state = {
            text: props.text, 
            positionX:props.positionX, 
            positionY: props.positionY,  
            color:props.color, 
            bgColor: props.bgColor
        };
      }  


----------------------------------------------------------------------------------------
/*--------------
import React from 'react';
//import React, {useState} from 'react';
import { TextInput } from 'react-native';

const EditText = () => {
  const [value, onChangeText] = React.useState('Edit');

  return (
    <TextInput
      style={{ height: 40, borderColor: 'gray', borderWidth: 1 }}
      onChangeText={text => onChangeText(text)}
      value={value}
    />
  );
}

export default EditText;
--------------------*/


/*----------------------------------------
import React, { Component } from 'react';
import { View, Text, StyleSheet,TextInput,PropTypes} from 'react-native';


export default class EditText extends React.Component {

  constructor(props) {
    super(props);
    this.state = {text:''}
  }
  render() {
    return (
      <TextInput style={styles.textinput}
        placeholder = {this.props.placeholder}
        onChangeText={ this.props.inputChange }
        onSubmitEditing= {this.props.AddItem}
      >
      </TextInput>
    )
  }
}
------------------------------------------*/
const Xmin = 0;
const Ymin = 0;

//let posX = getRandomXInt(Xmin, Xmax);  //Random positions 
        //let posY = getRandomYInt(Ymin, Ymax);
        //console.log (posX);
        //console.log (posY);
/*-----------------------------
// Functions - Generating random positions 
function getRandomXInt(Xmin, Xmax) {
    const min = Math.ceil(Xmin);
    const max = Math.floor(Xmax);
    const num =  Math.floor(Math.random() * (max - min + 1) + min);
    return num.toString()+"px"; 
  }
  
function getRandomYInt(Ymin, Ymax) {
    const min = Math.ceil(Ymin);
    const max = Math.floor(Ymax);
    const num =  Math.floor(Math.random() * (max - min + 1) + min);
    return num.toString()+"px"; 
  }

----------------------------------*/

 <button className = "Add" type="button" onClick={this.NoteColor} style={{backgroundColor: this.state.bgColor}} > + </button>

PickColor = () => {
    <SketchPicker/>
}

onClick={(e) => this.setState({showColorPicker: !showColorPicker.value} ) }